{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tangled/Programming/PROJECTS/edible-wild-world-next-prismic/edible-wild-world-next/pages/posts/[uid].js\";\nimport { client } from \"../../prismic-configuration\";\nimport { RichText } from \"prismic-reactjs\";\nimport Prismic from \"prismic-javascript\";\nexport default function Post({\n  data\n}) {\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"article\", {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: RichText.asText(data.title)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: RichText.asText(data.post_body)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\nexport async function getStaticProps({\n  params\n}) {\n  const {\n    uid\n  } = params;\n  const {\n    data\n  } = await client.getByUID(\"post\", uid);\n  return {\n    props: {\n      data\n    }\n  };\n}\nexport async function getStaticPaths() {\n  const {\n    results\n  } = await client.query(Prismic.Predicates.at(\"document.type\", \"post\"));\n  const paths = results.map(post => ({\n    params: {\n      uid: post.uid\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n}","map":{"version":3,"sources":["/Users/tangled/Programming/PROJECTS/edible-wild-world-next-prismic/edible-wild-world-next/pages/posts/[uid].js"],"names":["client","RichText","Prismic","Post","data","asText","title","post_body","getStaticProps","params","uid","getByUID","props","getStaticPaths","results","query","Predicates","at","paths","map","post","fallback"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,6BAAvB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAEA,eAAe,SAASC,IAAT,CAAc;AAAEC,EAAAA;AAAF,CAAd,EAAwB;AACrC,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,2BACE;AAAA,8BACE;AAAA,kBAASH,QAAQ,CAACI,MAAT,CAAgBD,IAAI,CAACE,KAArB;AAAT;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAOL,QAAQ,CAACI,MAAT,CAAgBD,IAAI,CAACG,SAArB;AAAP;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;AAED,OAAO,eAAeC,cAAf,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA0C;AAC/C,QAAM;AAAEC,IAAAA;AAAF,MAAUD,MAAhB;AACA,QAAM;AAAEL,IAAAA;AAAF,MAAW,MAAMJ,MAAM,CAACW,QAAP,CAAgB,MAAhB,EAAwBD,GAAxB,CAAvB;AACA,SAAO;AACLE,IAAAA,KAAK,EAAE;AAAER,MAAAA;AAAF;AADF,GAAP;AAGD;AAED,OAAO,eAAeS,cAAf,GAAgC;AACrC,QAAM;AAAEC,IAAAA;AAAF,MAAc,MAAMd,MAAM,CAACe,KAAP,CACxBb,OAAO,CAACc,UAAR,CAAmBC,EAAnB,CAAsB,eAAtB,EAAuC,MAAvC,CADwB,CAA1B;AAIA,QAAMC,KAAK,GAAGJ,OAAO,CAACK,GAAR,CAAYC,IAAI,KAAK;AACjCX,IAAAA,MAAM,EAAE;AACNC,MAAAA,GAAG,EAAEU,IAAI,CAACV;AADJ;AADyB,GAAL,CAAhB,CAAd;AAKA,SAAO;AACLQ,IAAAA,KADK;AAELG,IAAAA,QAAQ,EAAE;AAFL,GAAP;AAID","sourcesContent":["import { client } from \"../../prismic-configuration\"\r\nimport { RichText } from \"prismic-reactjs\"\r\nimport Prismic from \"prismic-javascript\"\r\n\r\nexport default function Post({ data }) {\r\n  return (\r\n    <React.Fragment>\r\n      <article>\r\n        <header>{RichText.asText(data.title)}</header>\r\n        <main>{RichText.asText(data.post_body)}</main>\r\n      </article>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport async function getStaticProps({ params }) {\r\n  const { uid } = params\r\n  const { data } = await client.getByUID(\"post\", uid)\r\n  return {\r\n    props: { data },\r\n  }\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n  const { results } = await client.query(\r\n    Prismic.Predicates.at(\"document.type\", \"post\")\r\n  )\r\n\r\n  const paths = results.map(post => ({\r\n    params: {\r\n      uid: post.uid,\r\n    },\r\n  }))\r\n  return {\r\n    paths,\r\n    fallback: false,\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}