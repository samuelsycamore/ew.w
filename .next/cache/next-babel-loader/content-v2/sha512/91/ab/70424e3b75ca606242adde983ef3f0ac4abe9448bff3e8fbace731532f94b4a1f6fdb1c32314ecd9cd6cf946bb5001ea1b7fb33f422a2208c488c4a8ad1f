{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tangled/Programming/PROJECTS/edible-wild-world-next-prismic/edible-wild-world-next/pages/posts/[uid].js\";\nimport { RichText } from \"prismic-reactjs\";\nexport var __N_SSG = true;\nexport default function Post(_ref) {\n  var data = _ref.data;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"article\", {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: RichText.asText(data.title)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: RichText.asText(data.post_body)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_c = Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/tangled/Programming/PROJECTS/edible-wild-world-next-prismic/edible-wild-world-next/pages/posts/[uid].js"],"names":["RichText","Post","data","asText","title","post_body"],"mappings":";;;AACA,SAASA,QAAT,QAAyB,iBAAzB;;AAGA,eAAe,SAASC,IAAT,OAAwB;AAAA,MAARC,IAAQ,QAARA,IAAQ;AACrC,sBACE;AAAA,2BACE;AAAA,8BACE;AAAA,kBAASF,QAAQ,CAACG,MAAT,CAAgBD,IAAI,CAACE,KAArB;AAAT;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAOJ,QAAQ,CAACG,MAAT,CAAgBD,IAAI,CAACG,SAArB;AAAP;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAQD;KATuBJ,I","sourcesContent":["import { client } from \"../../prismic-configuration\"\r\nimport { RichText } from \"prismic-reactjs\"\r\nimport Prismic from \"prismic-javascript\"\r\n\r\nexport default function Post({ data }) {\r\n  return (\r\n    <>\r\n      <article>\r\n        <header>{RichText.asText(data.title)}</header>\r\n        <main>{RichText.asText(data.post_body)}</main>\r\n      </article>\r\n    </>\r\n  )\r\n}\r\n\r\nexport async function getStaticProps({ params }) {\r\n  const { uid } = params\r\n  const { data } = await client.getByUID(\"post\", uid)\r\n  return {\r\n    props: { data },\r\n  }\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n  const { results } = await client.query(\r\n    Prismic.Predicates.at(\"document.type\", \"post\")\r\n  )\r\n\r\n  const paths = results.map(post => ({\r\n    params: {\r\n      uid: post.uid,\r\n    },\r\n  }))\r\n  return {\r\n    paths,\r\n    fallback: false,\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}