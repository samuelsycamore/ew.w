"use strict";
var _a;
exports.__esModule = true;
var core_1 = require("@babel/core");
var helper_module_imports_1 = require("@babel/helper-module-imports");
var nodePath = require("path");
function functionDeclarationToExpression(declaration) {
    return core_1.types.functionExpression(declaration.id, declaration.params, declaration.body, declaration.generator, declaration.async);
}
function classDeclarationToExpression(declaration) {
    return core_1.types.classExpression(declaration.id, declaration.superClass, declaration.body, declaration.decorators);
}
function getFileName(state) {
    var filename = state.filename, cwd = state.cwd;
    if (!filename) {
        return undefined;
    }
    if (cwd && filename.startsWith(cwd)) {
        return filename.slice(cwd.length);
    }
    return filename;
}
var functionsToReplace = ['getServerSideProps', 'getStaticProps'];
function transformPropGetters(path, transform) {
    var node = path.node;
    if (core_1.types.isFunctionDeclaration(node.declaration)) {
        var functionId = node.declaration.id;
        if (!functionId) {
            return;
        }
        if (!functionsToReplace.includes(functionId.name)) {
            return;
        }
        node.declaration = core_1.types.variableDeclaration('const', [
            core_1.types.variableDeclarator(functionId, transform(functionDeclarationToExpression(node.declaration))),
        ]);
        return;
    }
    if (core_1.types.isVariableDeclaration(node.declaration)) {
        node.declaration.declarations.forEach(function (declaration) {
            if (core_1.types.isIdentifier(declaration.id) &&
                functionsToReplace.includes(declaration.id.name) &&
                declaration.init) {
                declaration.init = transform(declaration.init);
            }
        });
    }
}
function addWithSuperJSONPropsImport(path) {
    return helper_module_imports_1.addNamed(path, 'withSuperJSONProps', 'babel-plugin-superjson-next/tools');
}
function addWithSuperJSONPageImport(path) {
    return helper_module_imports_1.addNamed(path, 'withSuperJSONPage', 'babel-plugin-superjson-next/tools');
}
function wrapExportDefaultDeclaration(path) {
    function wrapInHOC(expr) {
        return core_1.types.callExpression(addWithSuperJSONPageImport(path), [expr]);
    }
    var node = path.node;
    if (core_1.types.isIdentifier(node.declaration)) {
        node.declaration = wrapInHOC(node.declaration);
    }
    if (core_1.types.isFunctionExpression(node.declaration)) {
        node.declaration = wrapInHOC(node.declaration);
    }
    if (core_1.types.isFunctionDeclaration(node.declaration) ||
        core_1.types.isClassDeclaration(node.declaration)) {
        if (node.declaration.id) {
            path.insertBefore(node.declaration);
            node.declaration = wrapInHOC(node.declaration.id);
        }
        else {
            if (core_1.types.isFunctionDeclaration(node.declaration)) {
                node.declaration = wrapInHOC(functionDeclarationToExpression(node.declaration));
            }
            else {
                node.declaration = wrapInHOC(classDeclarationToExpression(node.declaration));
            }
        }
    }
}
var filesToSkip = (_a = []).concat.apply(_a, ['_app', '_document', '_error'].map(function (name) { return [
    name + '.js',
    name + '.jsx',
    name + '.ts',
    name + '.tsx',
]; }));
function shouldBeSkipped(filePath) {
    if (!filePath.includes('pages' + nodePath.sep)) {
        return true;
    }
    if (filePath.includes('pages' + nodePath.sep + 'api')) {
        return true;
    }
    return filesToSkip.some(function (fileToSkip) { return filePath.includes(fileToSkip); });
}
function superJsonWithNext() {
    return {
        name: 'add superjson to pages with prop getters',
        visitor: {
            Program: function (path, state) {
                var _a;
                var filePath = (_a = getFileName(state)) !== null && _a !== void 0 ? _a : nodePath.join('pages', 'Default.js');
                if (shouldBeSkipped(filePath)) {
                    return;
                }
                var body = path.get('body');
                body
                    .filter(function (path) { return core_1.types.isExportNamedDeclaration(path); })
                    .forEach(function (path) {
                    transformPropGetters(path, function (decl) {
                        return core_1.types.callExpression(addWithSuperJSONPropsImport(path), [
                            decl,
                        ]);
                    });
                });
                var exportDefaultDeclaration = body.find(function (path) {
                    return core_1.types.isExportDefaultDeclaration(path);
                });
                if (!exportDefaultDeclaration) {
                    return;
                }
                wrapExportDefaultDeclaration(exportDefaultDeclaration);
            }
        }
    };
}
exports["default"] = superJsonWithNext;
//# sourceMappingURL=index.js.map