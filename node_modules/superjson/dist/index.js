"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.parse = exports.deserialize = exports.serialize = void 0;
var annotator_1 = require("./annotator");
var is_1 = require("./is");
var plainer_1 = require("./plainer");
var types_1 = require("./types");
var class_registry_1 = require("./class-registry");
var symbol_registry_1 = require("./symbol-registry");
var custom_transformer_registry_1 = require("./custom-transformer-registry");
var error_props_1 = require("./error-props");
var serialize = function (object) {
    var _a = annotator_1.makeAnnotator(), getAnnotations = _a.getAnnotations, annotator = _a.annotator;
    var output = plainer_1.plainer(object, annotator);
    var annotations = getAnnotations();
    var res = {
        json: output
    };
    if (!is_1.isEmptyObject(annotations)) {
        res.meta = annotations;
    }
    return res;
};
exports.serialize = serialize;
var deserialize = function (payload) {
    if (!types_1.isSuperJSONResult(payload)) {
        throw new Error('Not a valid SuperJSON payload.');
    }
    var json = payload.json, meta = payload.meta;
    var result = json;
    if (!!meta) {
        return annotator_1.applyAnnotations(result, meta);
    }
    return result;
};
exports.deserialize = deserialize;
var stringify = function (object) {
    return JSON.stringify(exports.serialize(object));
};
var parse = function (string) {
    return exports.deserialize(JSON.parse(string));
};
exports.parse = parse;
var registerClass = function (v, options) {
    return class_registry_1.ClassRegistry.register(v, options);
};
var registerSymbol = function (v, identifier) {
    return symbol_registry_1.SymbolRegistry.register(v, identifier);
};
var registerCustom = function (transformer, name) {
    return custom_transformer_registry_1.CustomTransformerRegistry.register(__assign({ name: name }, transformer));
};
exports["default"] = {
    stringify: stringify,
    parse: exports.parse,
    serialize: exports.serialize,
    deserialize: exports.deserialize,
    registerClass: registerClass,
    registerSymbol: registerSymbol,
    registerCustom: registerCustom,
    allowErrorProps: error_props_1.allowErrorProps
};
//# sourceMappingURL=index.js.map