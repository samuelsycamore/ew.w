"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
exports.__esModule = true;
exports.plainer = void 0;
var is_1 = require("./is");
var transformer_1 = require("./transformer");
var util_1 = require("./util");
var isDeep = function (object) {
    return is_1.isPlainObject(object) ||
        is_1.isArray(object) ||
        is_1.isMap(object) ||
        is_1.isSet(object) ||
        transformer_1.isInstanceOfRegisteredClass(object);
};
var plainer = function (object, walker, path, alreadySeenObjects) {
    if (path === void 0) { path = []; }
    if (alreadySeenObjects === void 0) { alreadySeenObjects = []; }
    if (!isDeep(object)) {
        return walker({ isLeaf: true, node: object, path: path });
    }
    object = walker({ isLeaf: false, path: path, node: object });
    if (util_1.includes(alreadySeenObjects, object)) {
        return null;
    }
    if (!is_1.isPrimitive(object)) {
        alreadySeenObjects = __spread(alreadySeenObjects, [object]);
    }
    if (is_1.isArray(object)) {
        return object.map(function (value, index) {
            return exports.plainer(value, walker, __spread(path, [index]), alreadySeenObjects);
        });
    }
    if (is_1.isPlainObject(object)) {
        return util_1.mapValues(object, function (value, key) {
            return exports.plainer(value, walker, __spread(path, [key]), alreadySeenObjects);
        });
    }
};
exports.plainer = plainer;
//# sourceMappingURL=plainer.js.map